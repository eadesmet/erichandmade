4/16/2021:
{
	Do I remember any notes from the Eskil's code discussion last night?
		some of the stuff about naming
		array remove:
			array[i] = array[--array_length];
	I might finally today start up a new project and mess with some things
	Or, I should 'fix' the code here
	One of the things he said is to never leave code you don't like, just fix it
	and there's plenty of things to clean up here.
}

4/13/2021:
{
	Original Asteroids gameplay: https://www.youtube.com/watch?v=WYSupJ5r2zo
		- No rotations
		- No asteroid-asteroid collisions
		- player movement; wraps to opposite edge
		- fast shooting, projectiles are small dots/pixels
		- asteroids break into smaller ones (smaller ones move faster)
		- alien ships that shoot back at you
		- once everything is gone, a new set spawns in and the game keeps going
}

4/12/2021:
{
	I've been going down some rabbit holes today.
		Started on finishing up GJK, which means getting some convex polygons from my concave ones
		Then read a lot about how to tell if a polygon is concave vs convex
		started writing one
		read an example code of this
		started writing some more of my own
		realized i wanted a circular singly-linked list
		couldn't get one to work
		realize it comes down to memory allocation
		read through HMH Notes on day 15, about game memory
		got linked to gingerbill's post/series on memory allocations
}

3/31/2021:
{
	Now on HH 103, 24 in

	I've now got rotation of asteroids working, and I'm pretty happy with the result
	however, now we have some more collision bugs where asteroids phase through eachother

	diving into some of the collision code, I'm realizing some things we could update
		The asteroids could have 'line's instead  of points
			this might make looping easier, because then the last two points is just considered
			as another line
		
		The current logic goes something like this
			check two asteroids
				check all points of asteroid1 against asteroid2
					check all points of asteroid2 against each line of asteroid1

		shouldn't it just be 'check if point is within polygon'?
			there are algorithms for this
			I've been trying to read this: https://erich.realtimerendering.com/ptinpoly/
				the code examples from this are hard to read


	Collision with rotation is hard
	https://guide.handmadehero.org/code/day072/#4323

	I wrote a lot of code around the point in polygon paper
	but, it's maybe not great. or efficient. Can't spell, I'm tired.


}

3/23/2021:
{
    Now on HH 100, 49:43 in
}

3/19/2021:
{
    starting watching HH 238 (for the opengl stuff, that's where I'm at. about 10 min in)

    starting watching HH 99 (I think? this is where I left off before, roughly. about 28 min in)
}

3/10/2021:
{
    I've been reading this: https://fgiesen.wordpress.com/2013/02/06/the-barycentric-conspirac/

    TODO: Change all collision functions to check the
}

3/8/2021:
{
    Went through HH 235 and followed along: Got a pink screen using OpenGL


}

3/4/2021:
{
    I've been doing really good, making lots of progress!
    Though I haven't updated this notes file much, I've been blogging a bunch about the progress I've made
    feels good.

}

1/28/2021:
{
    Ok, I broke everything
    Trying out converting all asteroids and projectiles in to entities
    don't feel like debugging it right now. Just want a new project. patiently waiting for star code galaxy.

}

12/14:
{
        HH Day 92!!! Great resource for rotation/scaling, we need this for our asteroids
}

11/19:
{
	TODO: Mess with Transient Arena
}

11/16:
{
    HH - He has those black areas so he can tell if there are any drawing bugs
    (outside of the actual game area)
    This might be a good idea to re-implement here.
}

11/11:
{
    I had another idea - to put everything I need to render in an array
    (similar to HH's 'pushpiece')
    But all I need in Asteroids is Lines.
    So I could just push every line I need to draw in an array and do it all at once
}

11/3:
{
	Rethink our mapping towards 'GamePoints' in meters, etc.
	In HH, it's just a constant value in gamestate that is MetersToPixels,
	that then gets multiplied or divided
	He also only deals with that in very few places, so we don't have to think about it so much
}

11/2:
{
	Had an idea last night - adding IMGUI to my asteroids game
		Though, I don't know how it would work exactly
		I would think I need to add it to the platform layer, but then it wouldn't be able to access the game data?


}

10/23:
{
	(30 minutes into HH79, I stopped for now)

	Thinking about the collision loop for all asteroids

	for (ast in AllAsteroids)
	{
		AsteroidCollidePlayer(player, ast)

		for (ast2 in AllAsteroids)
			if ast == ast2 continue;
			if ast.CenterP - ast2.CenterP > MAX_ASTEROID_SIZE continue; (distance > max size)
			AsteroidCollideAsteroid(ast, ast2)
				if collide, bounce off eachother

		for (proj in AllProjectiles)
			if distance > max size continue
			AsteroidCollideProjectile(ast, proj)
				if collide, destroy asteroid +  destroy proj (based on proj type)

	}

	Also thinking about asteroid details / cosmetics
		struct cosmetic
			Points[16]
		struct asteroid
			comsmetic Cosmetics[16]

		for each cosmetic in asteroid.Cosmetics
			draw lines between points
			I'm thinking small lines for detailing

	Also thinking about asteroid rotations
		there has to be some math that would adjust our list of points around the center at some rate




}

10/20:
{
	Start of HH78:
		Position != collision
		break up each entity into pieces, and handle collisions on those pieces
}

10/14:
{
	I'm kind of gearing up to get back into this. Haven't done it yet, but there is a _want_ there.

	Found this link to maybe improve rendering? (see the aliased thick line, the last one)
		http://members.chello.at/easyfilter/bresenham.html

}

7/15:
{
    Today i'd like to maybe clean up some things and remove some unneeded functions
        if it's only being called once by one thing, it doesn't need to be a function

    One thing I've overlooked so far!
        Asteroid Collisions with other Asteroids, and with the player!
}

7/14:
{
    Handmade HEro Day 65, Question at 1:11:45
        Explaination of how his entity system works (beginsim, endsim)
        useful for what we might do later, or for my next game



    Collision with box is working (colliding two line segments and calculating which is closest)

    Collision with polygon will be the same thing! just loop through the lines/points!
    Then I think the calculated angle for the new endP will be both lines normalized then added?

}

7/13:
{
    Setting up a non-capped 'array' is easy
    Just have a Count and a pointer, and increment the pointer up to Count

}

7/8:
{
	Continuing watching handmade hero (just finished ep. 61)
		Great quote about working through problems and improving:
		https://youtu.be/bHGLcGgwpWg?t=4312
		Maybe send this to seth and silas



}

6/30:
{
Just read a thing on building good habits and removing old ones. good stuff
'habits-v2.pdf' in my reading folder. james clear article



}


6/29:
{
I guess I took a break of about 3 weeks - I wouldn't say I 'burned out', but definitely was not motivated

I just reread this blog post, and it resonated with me (probably did in the past too, but..)
https://blog.stephsmith.io/you-dont-need-to-quit-your-job-to-make/

It's about compound interest stacking up in a thing you are building up over time.
"if I were to do this thing regularly, every day, for a year - would my life improve?"
netflix? no
emails? no
drawing? yes
programming? yes

I also had another Handmade meetup yesterday, so I'm motivated from that too
I set a goal for myself to have something to show off for our next meeting, at the end of July

Planning on getting back into this today.



}


6/8:
{

A couple notes after re-reading part 7 - line collisions:
  Now I'll need to convert this to something I can actually use for the game
    I should rename a couple of those 'walkline' functions
  see if changing the thickness of the line works, and at what point the line collides (center?)
  the line collision stuff is basically seeing if the line collides with a box
    eventually, the line will collide with all 4 boundaries, but it's the ones that are within bounds we care about


OH NO! Oh NOOO! Jon!!
  'How 3d games do graphics' - 1:35:30 - "y = mx + b is kind of trash, you shouldn't use it"
    better equation being: ax + by + c = 0 or AX + By = C

holy cow

Our next post is going to be MATH - and it's awesome

our new equation to get our line into standard form is something the bresenham's algorithm already does
0 = (DY)x - (DX)y + (DX)b     :   where DY = ChangeInY (DeltaY) and DX = ChangeInX (DeltaX)

Mention how I should have read and understood this algorithm before using it!
It is soooo much more useful/helpful when I understand it!
For instance, if a point plugged into this equation returns positive, it's ABOVE the line (and neg is below)!!!
  these are called 'positive half plane' and 'negative half plane'





}

5/6:
{

I need to write notes about Vectors because I don't have these things memorized yet.

PointA - PointB = VectorA
VectorA is then starting at PointA going towards PointB, with the (distance, right?)


}

4/27:
{
Starting fresh, deleted a lot of asteroid code

Top priorities now:

Coordinate System/Map
- Get away from using Pixels, and map to our own coordinates
-   Center being the origin
-   Units is meters
- Differentiate between 'position' vectors and 'normal' vectors
-   Learn what this is. It's basically only for calculations

Collision Detection
- Start by creating a "raytracer" (just start drawing lines and bouncing them)
-   bounce some lines off of weird angles to make sure the resulting line is correct
-   could start this by drawing a line from the player, and this will be our shooting essentially

Player movement
- calculate the speed at which the player is rotating.
- I would think this would be easy since its just a number for the angle?

}






















------------------------------------
/*

Blog post 1 (3/8/2020):

Thinking about how to draw the player (going to be a triangle).

I broke it down into simpler steps, step 1 being just 'draw a line'.
Then I figured I can just draw 3 lines on 3 points to get the triangle.
I also figured early on that I will 'draw rectangle' on each point.

Drawing a line took me a long time because I just don't know simple math..

Finally discovered y = mx + b, and the calculation for the slope of a line.

and now I'm drawing a line!! woohoo!

Oh, and early on I was thinking the hot reloading isn't working,
but it was all just because I wasn't clearing the render buffer between loads
so it would always have the old drawing there too.
Then created ClearBackground call every time.

Blog post Day 1, Part 2? (3/9/2020):

I mostly fixed the line between the two points issue
(it was about 20 pixles too much in both x and y)
It was what I was using for B - The y-intercept is not just the y coord of the first point
it has to be calculated from the other variables.

however, the blue line is now too low?

My god..

Showed my co-worker the problem, and he solves the whole thing in 2 minutes.
A couple code changes, it's working.

We only need 1 loop, for all the x's, and we are calculating y.
The slope and y-intercept are constants, based off of the points.

Also, drew a little cheeky border

Next step.. transforms??
Drawing a triangle (player) and turning it


*/

/*

Blog post 2 (3/16/2020);

I drew a grid, and I have my first drawing a circle.

Drawing a circle went super smoothly, suprisingly.
this one, I just looked up the math around it, and coded it.
super simple, and it just worked.

Fixed a bug in RenderLine - Checking if length+width are negative, I'm swapping the points

Our next big problem is actually going to be mapping out our positions,
meaning we have to store our current map, and where things are located
so that we can eventually do collision detection



*/

/*

Blog Post 3 (starting 3/17/2020):

Started by cleaning up some code, basically just moving it around to where it should be
(no functions in header files, created a couple new files)

got rid of my Clamp calls and added Asserts instead

Refactored Pixels to be void *
Refactored v2 to be real32
Added color values as real32 R, G and B
Added game_state structure and initializing it with Memory

When I finally got all the above changes compiling, my broken screenshot appears
    Multiple players are drawn.. how??
Grid dots are just _everywhere_

The grid dots got fixed, that was from a refactor in calling DrawMap I believe..
I think it was an issue with rendersquare??

Then the dots just everywhere, it was a miscalculation from renderline
I noticed that when I changed my points by only small values, the dots would change drastically
it was plotting a point, then the next point was down 1 in y, and about 80 pixels to the right
and so on, it was wrapping around i think
the x positions were consistently off, I believe the y positions were always correct

the fix goes to Bresenham's line algorithm
I just implemented this line for line and it works perfectly for all lines
https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm

RenderCircle has also been broken
changed this to Bresenham's circle algorithm and it's almost working




*/

/*

Blog Post 4 (starting 3/24/2020):

Cleaned up a couple of other things
Removed all the old sample drawing things
Changed draw grid to draw outlines instead (much more useful)
Drawing crosshairs over grid to show center

Changed RenderPlayer to take a player struct
Changed RenderPlayer to draw using the points in the player struct
Player initialization is setting the points for player

realized that the player movement is always dependent on the FrontP
and that FrontP is around a circle!

- lots of testing, trying to get the top and bottom points of the player.. :(

now show moreissues.png
The pink square should be inside the blue square
and our small circle is obviously off
my first guess is a rounding error, maybe inside of rendersquare.
that was correct! rendersquare_fix.png
the change was to Round X and Y loop variables

we are getting close - the player works for pretty much every angle except 140-180
this likely has to do with if OppositeAngle >= 320
I was adjusting Bottom for both cases, when the first is Bottom and second is Top
that fixed it
[firstplayermovement.gif]


Work on something first, until you get stuck, _then_ read about _that specific problem_
this gives you context
otherwise, reading something where you don't know anything, it could be good or bad..


*/

/*

Blog Post 5 (starting 3/31/2020):

Started an asteroid struct
my first attempt at drawing one and moving it across the screen


-- thinking --
To have different positions/coordinates
EAch 'entity' has multiple positions (in HH, AbsTileX and Y, offsetx and y, width/height, etc.
Then I think when one of the positions change, there is a function that basically syncs all location data
See function 'MoveIntoTileSpace'
-- thinking --

-- continued thinking (days later)--
This coordinate system can be whatever we want
HH had locations relative to which TileMap they are on,
as well as a postition relative to the tiles themselves (the offset from the tile's corner)

also big note.. Define why we are trying to do this coordinate system stuff
- Trying to remove the idea of 'Pixels' when we work with positions
- Working in pixels means we are constantly thinking about calculations that we don't have to
-
-- continued thinking --

 tried to just type in a ton of code (first CheckCollisions) that I didn't understand
from the '6 useful snippets' on [hashing?]
first compiling version gave a stackoverflow, so I made the arrays smaller
- still not sure how they were so big?
- also mention that the stack overflow didn't tell me anything, and I couldn't even step into the function
second compiling version didn't do anything that I wanted, really
I stepped through it, and it just didn't work
I could probably still make it work with some tweaks, but I commented it out for now

Then, I looked up raylib's collision functions, and WOW
It's actually so easy!
two circles colliding is just a calculation of the distance of their center points and radiuses added together!
my first thoughts on circle collision was to check _every_ point on the circle, and that's just completely wrong
I typed up this collision and had a test working within 5 minutes
much better time spent than the huge 'collision buckets' thingy.

What I need is a custom solution to what we are dealing with specifically here.
So armed with the collision detector with two circles, we need to check collisions for all of them
(also, realized that for asteroids 'bouncing' off eachother,
- I can simply just change the EndP! this was huge realization)
Since we will only have, like a MAX of 50 asteroids on the screen, it wouldn't be too bad to check all of them
against all the others, every time. We'll have to test this out.

I ended this post short, because I'll be doing this refactor now. I hope.

*/

/*

Blog Post 6 (starting 4/15/2020):

Ok, do the refactor! Get into it! We can do this!

Changed the 'map' to be the render width/height
- turned out to be pretty easy, didn't take much time at all

started to get into collision detection again
- got 'colliding tile' to work; maybe show 'collision_tile_result' stuff
-
-

fixed holding down input
- there was a check in the process input for WasDown != IsDown to handle it
-    added case for movement keys only

!!!!!!!!!
I think it's time to start fresh and delete a lot of stuff I've done over the past 2 weeks
All of the current asteroid stuff, I think, is just bad, and I'm kind of flailing around
I also think this is the reason that I've been demotivated.. it's just a bunch of cruft to deal with
I need to start back to simple steps. Get one 'asteroid' on the screen. move it around. collide with something.
I also really want to flesh out the map / coordinate system.
!!!!!!!!!

*/

/*
Just a couple ideas:

We could add a screen shake to the game fairly easily
all we'd need to do is adjust the offset x and y randomly
would put these in gamestate


*/

/*

Notes from Early HH:

CHange our color to 3 floating point values
These are easier to calculate and blend against
(Values between 0 and 1)
Straight up casting a float to an integer TRUNCATES the number: 1.89 -> 1.0

Remember there are steps to moving things..
It all has to be calculated up front, and then rendered with the new calculated positions.

*/


//~ TODO LIST
/*

Asteroid Movement
- Going to have a random starting position and an end position(across from start, nearly crossing player)
- Random speed (set asteroid speeds, slow, med, fast?)


Asteroid Destroying
- first run can just be not rendering the asteroid anymore (changing it's state)
- Destroy them if they are off the screen
 -    We don't want to be tracking them if their trajectory is off the screen and getting further
- We could 'cycle' out inactive asteroids and create a new one in their place in the array

Collision detection
- Player and Asteroid (game over)
- Asteroid and Asteroid (bounce slightly?)



Improve player movement
- Holding down the button continuosluyouyyyy moves

Player shooting
- I would like to build a ray tracer for this.
-  Having a line draw from the frontP on the players angle would be a start



Remove all these blasted comments everywhere!



*/
